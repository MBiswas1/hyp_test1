lines(gol_ns100, lty = 2)
axis(1, at = 1:del, labels = seq100)
plot(loq_s100, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Linear Kernel on Beta2")
lines(loq_ns100, lty = 2)
axis(1, at = 1:del, labels = seq100)
plot(qoq_s100, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Quadratic Kernel on Beta2")
lines(qoq_ns100, lty = 2)
axis(1, at = 1:del, labels = seq100)
plot(goq_s100, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Gaussian Kernel on Beta2")
lines(goq_ns100, lty = 2)
axis(1, at = 1:del, labels = seq100)
plot(log_s100, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Linear Kernel on Beta3")
lines(log_ns100, lty = 2)
axis(1, at = 1:del, labels = seq100)
plot(qog_s100, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Quadratic Kernel on Beta3")
lines(qog_ns100, lty = 2)
axis(1, at = 1:del, labels = seq100)
plot(gog_s100, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Gaussian Kernel on Beta3")
lines(gog_ns100, lty = 2)
axis(1, at = 1:del, labels = seq100)
plot.new()
plot.new()
plot.new()
legend("center", ncol = 2,  legend=c("T1", "T2"), title = "Test Statistic",
lty=2:1, cex = 1.5)
legend("center", ncol = 2,  legend=c("T1", "T2"), title = "Test Statistic",
lty=2:1, cex = 1.5)
legend("center", ncol = 2,  legend=c("T1", "T2"), title = "Test Statistic",
lty=2:1, cex = 1.4)
del <- 9
seq100 <- seq(0, 4, length = del)
par(mfrow=c(4,3), oma = c(0,0,0,0), cex = 0.5)
plot(lol_s100, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Linear Kernel on Beta1")
lines(lol_ns100, lty = 2)
axis(1, at = 1:del, labels = seq100)
plot(qol_s100, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Quadratic Kernel on Beta1")
lines(qol_ns100, lty = 2)
axis(1, at = 1:del, labels = seq100)
plot(gol_s100, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Gaussian Kernel on Beta1")
lines(gol_ns100, lty = 2)
axis(1, at = 1:del, labels = seq100)
plot(loq_s100, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Linear Kernel on Beta2")
lines(loq_ns100, lty = 2)
axis(1, at = 1:del, labels = seq100)
plot(qoq_s100, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Quadratic Kernel on Beta2")
lines(qoq_ns100, lty = 2)
axis(1, at = 1:del, labels = seq100)
plot(goq_s100, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Gaussian Kernel on Beta2")
lines(goq_ns100, lty = 2)
axis(1, at = 1:del, labels = seq100)
plot(log_s100, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Linear Kernel on Beta3")
lines(log_ns100, lty = 2)
axis(1, at = 1:del, labels = seq100)
plot(qog_s100, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Quadratic Kernel on Beta3")
lines(qog_ns100, lty = 2)
axis(1, at = 1:del, labels = seq100)
plot(gog_s100, type ='l', xaxt = "n", ylab = "Power", ylim = c(0, 1), main = "Gaussian Kernel on Beta3")
lines(gog_ns100, lty = 2)
axis(1, at = 1:del, labels = seq100)
plot.new()
plot.new()
plot.new()
legend("center", ncol = 2,  legend=c("T1", "T2"), title = "Test Statistic",
lty=2:1, cex = 1.4)
load("C:/partition1/NCSU/Research/Dr. Maity/pow_d_lol_nosig_100.Rdata")
lol_ns100 <- pow
load("C:/partition1/NCSU/Research/Dr. Maity/pow_d_lol_sig_100.Rdata")
lol_s100 <- pow
load("C:/partition1/NCSU/Research/Dr. Maity/pow_d_loq_sig_100.Rdata")
loq_s100 <- pow
load("C:/partition1/NCSU/Research/Dr. Maity/pow_d_loq_nosig_100.Rdata")
loq_ns100 <- pow
load("C:/partition1/NCSU/Research/Dr. Maity/pow_d_log_nosig_100.Rdata")
log_ns100 <- pow
load("C:/partition1/NCSU/Research/Dr. Maity/pow_d_log_sig_100.Rdata")
log_s100 <- pow
load("C:/partition1/NCSU/Research/Dr. Maity/pow_d_qog_sig_100.Rdata")
qog_s100 <- pow
load("C:/partition1/NCSU/Research/Dr. Maity/pow_d_qog_nosig_100.Rdata")
qog_ns100 <- pow
load("C:/partition1/NCSU/Research/Dr. Maity/pow_d_qoq_nosig_100.Rdata")
qoq_ns100 <- pow
load("C:/partition1/NCSU/Research/Dr. Maity/pow_d_qoq_sig_100.Rdata")
qoq_s100 <- pow
load("C:/partition1/NCSU/Research/Dr. Maity/pow_d_qol_sig_100.Rdata")
qol_s100 <- pow
load("C:/partition1/NCSU/Research/Dr. Maity/pow_d_qol_nosig_100.Rdata")
qol_ns100 <- pow
save.image("C:/partition1/NCSU/Research/Dr. Maity/plots_dense_100.RData")
load("C:/partition1/NCSU/Research/Dr. Maity/pow_d_lol_nosig_40.Rdata")
lol_ns40 <- pow
load("C:/partition1/NCSU/Research/Dr. Maity/pow_d_loq_nosig_40.Rdata")
loq_ns40 <- pow
load("C:/partition1/NCSU/Research/Dr. Maity/pow_d_log_nosig_40.Rdata")
log_ns40 <- pow
load("C:/partition1/NCSU/Research/Dr. Maity/pow_d_qog_nosig_40.Rdata")
qog_ns40 <- pow
load("C:/partition1/NCSU/Research/Dr. Maity/pow_d_qoq_nosig_40.Rdata")
qoq_ns40 <- pow
qoq_ns40
plot(qoq_ns40)
load("C:/partition1/NCSU/Research/Dr. Maity/pow_d_qol_nosig_40.Rdata")
qol_ns40 <- pow
save.image("C:/partition1/NCSU/Research/Dr. Maity/plots_dense_40.RData")
load("C:/partition1/NCSU/Research/Dr. Maity/pow_d_loq_sig_40.Rdata")
loq_s40 <- pow
save.image("C:/partition1/NCSU/Research/Dr. Maity/pow_d_loq_sig_40.Rdata.RData")
source('C:/partition1/NCSU/Research/Dr. Maity/pow_d_gol_sig_40.R')
for(i in 1:del)
pow[i] <- mean(p.val[i,]<0.05, rm.na = T)
p.val[,4]
p.val2 <- p.val[1:3,]
for(i in 1:del)
pow[i] <- mean(p.val2[i,]<0.05)
p.val2 <- p.val[,1:3]
for(i in 1:del)
pow[i] <- mean(p.val2[i,]<0.05)
plot(pow)
require(kernlab)
kern <- rbfdot(0.5)
X.star <- sapply(seq, function(j) sapply(seq, function(i) kern(X[,i], X[,j])))
system.time(X.star <- sapply(seq, function(j) sapply(seq, function(i) kern(X[,i], X[,j]))))
X.star2 <- outer(seq, seq function(i, j) {kern(X[,i], X[,j])})
X.star2 <- outer(seq, seq, function(i, j) {kern(X[,i], X[,j])})
X.star2 <- outer(seq, seq, function(i, j) {sum(X[,i], X[,j]})
X.star2 <- outer(seq, seq, function(i, j) {sum(X[,i], X[,j])})
system.time(est.sig(Y.center, m))
3.45*11*10
system.time(data.gen(n, q, prob, delta))
system.time(gam(Y~s(T) + s(T, by = Z1) + s(T, by = Z2)))
system.time(test.stat(X.new, Y.center, c0, sigi, seq))
require(refund)
?face.sparse
sig0 <- sig
rep(seq, 2)
rep(t(seq), 2)
c(unlist(sapply(seq, function(x) rep(x, 2))))
Y.center[,1]
c(Y.center)[1:51]
est.sig <- function(Y, m, t, seq, n)
{
dat <- data.frame(subj = c(unlist(sapply(seq, function(x) rep(x, m)))),
argvals = seq(t, n),
y = Y)
f <- face.sparse(dat, argvals.new = t)
eval <- f$eigenvalues
evec <- f$eigenfunctions
if(f$var.error.hat[1] != 0)
{f2 <- f$var.error.hat[1]}else
f2 <- mean((f$Y-f$Yhat)^2, na.rm=TRUE)
if(length(eval) == 1)
{  sig <- eval * evec %*% t(evec) + f2*diag(m)
}else
sig <- evec%*%diag(eval)%*%t(evec) + f2*diag(m)
#abc <- sig[unlist(index),unlist(index)]
#prev line gave matrix with non 0 off diag. Can we fix this?
sigi <- solve(sig)
return(sigi)
}
Y.center <- fit$residuals
sigi <- est.sig(Y.center, m, t, seq, n)
est.sig <- function(Y, m, t, seq, n)
{
dat <- data.frame(subj = c(unlist(sapply(seq, function(x) rep(x, m)))),
argvals = rep(t, n),
y = Y)
f <- face.sparse(dat, argvals.new = t)
eval <- f$eigenvalues
evec <- f$eigenfunctions
if(f$var.error.hat[1] != 0)
{f2 <- f$var.error.hat[1]}else
f2 <- mean((f$Y-f$Yhat)^2, na.rm=TRUE)
if(length(eval) == 1)
{  sig <- eval * evec %*% t(evec) + f2*diag(m)
}else
sig <- evec%*%diag(eval)%*%t(evec) + f2*diag(m)
#abc <- sig[unlist(index),unlist(index)]
#prev line gave matrix with non 0 off diag. Can we fix this?
sigi <- solve(sig)
return(sigi)
}
sigi <- est.sig(Y.center, m, t, seq, n)
sig2 <- solve(sigi)
source('C:/partition1/NCSU/Research/Dr. Maity/pow_d_gol_sig_40.R')
Y.center <- matrix(Y.center, nrow = m)
T0 <- test.stat(X, Y.center, c0, sigi, seq)
View(Z)
source('C:/partition1/NCSU/Research/Dr. Maity/pow_d_gol_sig_40.R')
system.time(source('C:/partition1/NCSU/Research/Dr. Maity/pow_d_gol_sig_40.R'))
p.val2 <- p.val[,1:5]
for(i in 1:del)
pow[i] <- mean(p.val2[i,]<0.05)
plot(pow)
source('C:/partition1/NCSU/Research/Dr. Maity/pow_d_gol_sig_40.R')
plot(pow)
sig <- solve(sigi)
source('C:/partition1/NCSU/Research/Dr. Maity/pow_d_gol_sig_40.R')
p.val2 <- p.val[,-10]
for(i in 1:del)
pow[i] <- mean(p.val2[i,]<0.05)
plot(pow)
pow
p.val2 <- p.val2[,-9]
for(i in 1:del)
pow[i] <- mean(p.val[i,]<0.05)
pow
for(i in 1:del)
pow[i] <- mean(p.val2[i,]<0.05)
pow
source('C:/partition1/NCSU/Research/Dr. Maity/pow_d_gol_sig_40.R')
source('C:/partition1/NCSU/Research/Dr. Maity/pow_d_gol_sig_40.R')
?fpca.sc
source('C:/partition1/NCSU/Research/Dr. Maity/pow_d_gol_sig_40.R')
View(p.val)
plot(pow)
a <- 2
s <- 2016
n <- 100
rep <- 1000
m <- 51
p <- 10
q <- 5
dt <- 1/(m - 1)
t <- t.gen(m)
coeff.est <- matrix(NA, rep, p)
per.false <- rep(TRUE, rep)
ls <- matrix(NA, rep, p)
ls.l <- matrix(NA, rep, p)
X.l <- array(NA, c(p,n,q))
coeff.est.l <- matrix(NA, rep, p)
per.false.l <- rep(TRUE, rep)
coeff.est.q <- matrix(NA, rep, p)
per.false.q <- rep(TRUE, rep)
ls.q <- matrix(NA, rep, p)
coeff.est.c <- matrix(NA, rep, p)
per.false.c <- rep(TRUE, rep)
ls.c <- matrix(NA, rep, p)
beta1 <-array(NA, c(rep,m,n))
beta2 <-array(NA, c(rep,m,n))
sigma <- 2^seq(-5,1)
sig <- rep(NA, rep)
sig.l <- rep(NA, rep)
r <- 1
data <- data.gen(p, n, m, q, seed = s)
library(mvtnorm)
library(gam)
library(nnlasso)
library(kernlab)
library(clusterGeneration)
library(glmnet)
t.gen <- function(m, opt = 0)
{
if(opt==0)
return(seq(0,1,len=m))
return("Error")
}
beta1.gen <- function(x,t)
{
y <- (rowSums(x))^2
beta <- exp(-(t%*%t(y)))
return(beta*15-8)
}
beta2.gen <- function(x,t)
{
return(kronecker(cos(2*pi*t),t((rowSums(x))^2)))
}
beta3.gen <- function(x,t)
{
return(matrix(0,m,n))
}
beta4.gen <- function(x,t)
{
return(matrix(0,m,n))
}
beta5.gen <- function(x,t)
{
return(matrix(0,m,n))
}
err.gen<- function(n,m,sigma=1)
{
return(matrix(rnorm(n*m,0,sigma),m,n))
}
mu.gen<- function(t,n)
{
return(kronecker(t,t(rep(1,n))))
}
x1.gen<- function(n,q)
{
return(rmvnorm(n,,diag(q)))
}
x2.gen<- function(n,q)
{
ar.sim<-arima.sim(model=list(ar=0.2),n=n*q)
return(matrix(ar.sim,nrow=n))
}
x3.gen<- function(n,q)
{
return(rmvnorm(n,,diag(seq(1,q))))
}
x4.gen<- function(n, q)
{
return(rmvnorm(n,,2*diag(q)))
}
x5.gen<- function(n, q)
{
return(rmvnorm(n,,diag(seq(1,q)+1)))
}
x6.gen<- function(n, q)
{
ar.sim<-arima.sim(model=list(ar=0.4),n=n*q)
return(matrix(ar.sim,nrow=n))
}
x7.gen<- function(n, q)
{
ar.sim<-arima.sim(model=list(ar=0.5),n=n*q)
return(matrix(ar.sim,nrow=n))
}
x8.gen<- function(n,q)
{
return(rmvnorm(n,,diag(q)))
}
x9.gen<- function(n,q)
{
return(rmvnorm(n,,2*diag(q)))
}
x10.gen<- function(n, q)
{
ar.sim<-arima.sim(model=list(ar=0.9),n=n*q)
return(matrix(ar.sim,nrow=n))
}
get.upper.tri <- function(x)
{
return(x[upper.tri(x, diag=FALSE)])
}
data.gen <- function(p, n, m, q, opt = 0, seed = 1000)
{
set.seed(seed)
t <- t.gen(m, opt)
X <- array(NA,dim=c(p, n, q))
X[1,,] <- x1.gen(n,q)
X[2,,] <- x2.gen(n,q)
X[3,,] <- x3.gen(n,q)
X[4,,] <- x4.gen(n,q)
X[5,,] <- x5.gen(n,q)
X[6,,] <- x6.gen(n,q)
X[7,,] <- x7.gen(n,q)
X[8,,] <- x8.gen(n,q)
X[9,,] <- x9.gen(n,q)
X[10,,] <- x10.gen(n,q)
beta1 <- beta1.gen(X[1,,], t)
beta2 <- beta2.gen(X[2,,], t)
Y.star <- mu.gen(t,n) + beta1 + beta2 + err.gen(n,m)
mu.hat <- rowMeans(Y.star)
Y <- Y.star - mu.hat
return(list(X = X, Y = Y))
}
kern.sel <- function(k,s)
{
if (k==1)
return(rbfdot(s))
else if(k==2)
return(laplacedot(s))
else if (k==3)
return(polydot(2,s))
else if (k==4)
return(polydot(3,s))
}
var.sel <- function(p, n, X, Y, dt, sigma, choice = 1)
{
len <- length(sigma)
T <- array(NA, dim = c(p,n,n))
R <- matrix(NA,n*(n-1)/2, p)
Y0 <- t(Y)%*%Y*dt
sum.Y <- get.upper.tri(Y0)
coeff <- matrix(0, len, p)
se <- matrix(NA, len, p)
max <- rep(1e32,p)
for( iter in 1: len)
{
kernel <- kern.sel(choice, sigma[iter])
for( i in 1: p)
T[i,,] <-  kernelMatrix(kernel,X[i,,])
for( i in 1: p)
R[,i] <- get.upper.tri(T[i,,])
cv <- cv.nnlasso(R, sum.Y, family="normal", nlambda=100, plot = FALSE, errorbars = FALSE)
lambda <- cv$lambda #keeps changing
l1 <- cv$lambdas[1]
if(lambda==l1)
{ se[iter,]<- max
}else {Tau.nn <- nnlasso(R, sum.Y, path=FALSE, lambda = lambda, family = "normal", SE=TRUE, eps=-1e-64)
coeff[iter,]<- Tau.nn$coef[2,]
se[iter,]<- Tau.nn$se[-1]
}
}
min <- which.min(apply(se^2,1,sum))
min.coeff<- coeff[min,]
sig <- sigma[min]
ls <- lsfit(R, sum.Y, intercept = FALSE)$coef
return(list(coeff = min.coeff, sig=sig, ls = ls))
}
data <- data.gen(p, n, m, q, seed = s)
X <- data$X
Y <- data$Y
len <- length(sigma)
T <- array(NA, dim = c(p,n,n))
R <- matrix(NA,n*(n-1)/2, p)
Y0 <- t(Y)%*%Y*dt
sum.Y <- get.upper.tri(Y0)
coeff <- matrix(0, len, p)
se <- matrix(NA, len, p)
max <- rep(1e32,p)
iter <- 1
kernel <- kern.sel(choice, sigma[iter])
choice <- 1
kernel <- kern.sel(choice, sigma[iter])
for( i in 1: p)
T[i,,] <-  kernelMatrix(kernel,X[i,,])
for( i in 1: p)
R[,i] <- get.upper.tri(T[i,,])
cv <- cv.nnlasso(R, sum.Y, family="normal", nlambda=100, plot = FALSE, errorbars = FALSE)
lambda <- cv$lambda #keeps changing
cv <- cv.nnlasso(R, sum.Y, family="normal", nlambda=100, plot = FALSE, errorbars = FALSE)
lambda2 <- cv$lambda #keeps changing
?cv.nnlasso
l1 <- cv$lambdas[1]
cv$lambdas
cv <- cv.nnlasso(R, sum.Y, family="normal", nlambda=100, plot = FALSE, errorbars = FALSE)
cv$lambdas
cv$lambda
cv$pmse
cv <- cv.nnlasso(R, sum.Y, family="normal", nlambda=100, plot = FALSE, errorbars = FALSE)
cv$pmse
cv$se
cv <- cv.nnlasso(R, sum.Y, family="normal", nlambda=100, plot = FALSE, errorbars = FALSE)
cv$se
cv$pmse
load("C:/partition1/NCSU/Research/Dr. Maity/cv_nnlasso_vary_sigma_10.RData")
per0
per.true
per.false
per.whole
per.l0
per.false.l
per.whole.l
per.true.l
per.true.q
load("C:/partition1/NCSU/Research/Dr. Maity/varying_m.RData")
load("C:/partition1/NCSU/Research/Dr. Maity/varying_m2.RData")
source('C:/partition1/NCSU/Research/Dr. Maity/varying_m2.R')
?fpca.sc
source('C:/partition1/NCSU/Research/Dr. Maity/varying_m2.R')
per
per0
save.image("C:/partition1/NCSU/Research/Dr. Maity/varying_m2.RData")
load("C:/partition1/NCSU/Research/Dr. Maity/varying_m_5_10.RData")
per0
source('C:/partition1/NCSU/Research/Dr. Maity/varying_m3.R')
source('C:/partition1/NCSU/Research/Dr. Maity/varying_m3.R')
source('C:/partition1/NCSU/Research/Dr. Maity/varying_m2.R')
?sort
source('C:/partition1/NCSU/Research/Dr. Maity/varying_m2.R')
per0
?fpca.sparse
library(rARPACK)
?fpca.sparse
library(fpca)
?face.sparse
?fpca.face
source('C:/partition1/NCSU/Research/Dr. Maity/varying_m3.R')
source('C:/partition1/NCSU/Research/Dr. Maity/varying_m3.R')
source('C:/partition1/NCSU/Research/Dr. Maity/varying_m3.R')
source('C:/partition1/NCSU/Research/Dr. Maity/varying_m3.R')
len <- length(sigma)
T <- array(NA, dim = c(p,n,n))
R <- matrix(NA,n*(n-1)/2, p)
Y0 <- unlist(Y)
t0 <- unlist(t.star)
index<- NULL
for( i in 1:n)
index <- c(index, rep(i,length(Y[[i]])))
data <- data.frame(.id=index, .index = t0, .value = Y0)
fpca <- fpca.face(ydata = data, pve = 0.99, p = 5)
data
fpca <- fpca.face(ydata = data, pve = 0.99)
fpca <- face.sparse(ydata = data, pve = 0.99)
fpca <- face.sparse(data, pve = 0.99)
data <- data.frame(.subj=index, .argvals = t0, .y = Y0)
fpca <- face.sparse(data, pve = 0.99)
data <- data.frame(subj=index, argvals = t0, y = Y0)
fpca <- face.sparse(data, calculate.scores = TRUE)
scores <- fpca$scores
fpca$calculate.scores
fpca$scores
fpca <- face.sparse(data, calculate.scores = TRUE, newdata = data)
scores <- fpca$scores
scores
Y1 <- scores%*%t(scores)
dim(scores)
scores <- fpca$scores
scores <- fpca$scores$scores
sum.Y <- get.upper.tri(Y1)
coeff <- matrix(0, len, p)
se <- matrix(NA, len, p)
source('C:/partition1/NCSU/Research/Dr. Maity/varying_m3.R')
per0
source('C:/partition1/NCSU/Research/Dr. Maity/varying_m3.R')
per0
per.false
source('C:/partition1/NCSU/Research/Dr. Maity/pow_d_gol_sig_40.R')
source('C:/partition1/NCSU/Research/Dr. Maity/pow_d_gol_sig_40.R')
source('C:/partition1/NCSU/Research/Dr. Maity/pow_d_gol_sig_40.R')
fit <- mgcv::gam(Y~s(T) + s(T, by = Z1) + s(T, by = Z2))
